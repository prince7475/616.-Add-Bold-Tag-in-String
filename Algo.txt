Given a string s and a list of strings dict, you need to add a closed pair of bold 
tag <b> and </b> to wrap the substrings in s that exist in dict. If two such
substrings overlap, you need to wrap them together by only one pair of closed
bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them.
Example 1:
Input: 
s = "abcxyz123"
dict = ["abc","123"]
Output:
"<b>abc</b>xyz<b>123</b>"
Example 2:
Input: 
s = "aaabbcc"
dict = ["aaa","aab","bc"]
Output:
"<b>aaabbc</b>c"
Note:
The given dict won't contain duplicates, and its length won't exceed 100.
All the strings in input have length in range [1, 1000].


function addBoldTag(s, dict){

let allDictIndex = getAllDictIndex(s,dict)
let combineIndex = getCombineIndex(allDictIndex)

let strArr = s.split("")
  for(let arr of combineIndex){
      let start = arr[0]
      let end = arr[1]
      strArr[start] = "<b>" + strArr[start]
      strArr[end] = strArr[end] + "</b>"
  }
  
  return strArr.join("")
}


function getAllDictIndex(str,dict){
  let result = []
  for(let curr of dict){
    let startIdx = str.indexOf(curr)
    if(startIdx !== -1){
      let endIdx = (curr.length - 1) + startIdx
      result.push([startIdx, endIdx])
    }
  }
  return result
}

function getCombineIndex(nestedArr){
  nestedArr.sort((a,b) => a[0] - b[0])
  
  for(let i = 1; i < nestedArr; i++){
    let prev = nestedArr[i - 1]
    let curr = nestedArr[i]
    if(prev[1] >= curr[0]){
      nestedArr[i] = [Math.min(prev[0], curr[0]), Math.max(prev[1], curr[1])]
      nestedArr.splice(i - 1, 1)
      i--
    }
  }
 
  return nestedArr
}










